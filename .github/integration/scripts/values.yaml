# Default values for htsget-rs chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: harbor.nbis.se/gdi/htsget-rs
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: [] #
nameOverride: ""     #
fullnameOverride: "" #

# Assume RBAC is enabled in the cluster
rbacEnabled: true

# Pod security policy configuration  (k8s <1.25.0)
podSecurityPolicy:
  create: false

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  privileged: false

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: "RuntimeDefault"

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer:
  hosts:
    - host: htsget.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  # If the certificates are generated by external providers
  # the secrets containing them need to be created manually.
  #  - secretName: htsget.local-tls
  #    hosts:
  #      - htsget.local
  # issuer requires a configured cert-manager
  issuer: ""
  clusterIssuer: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 20
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# The application's ticket server TLS can be disabled by setting enabled to false.
# Not to be used in production but handy for testing.
tls:
  enabled: false
  issuer: ""
  clusterIssuer: ""
  secretName: ""

c4gh:
  # Set to true if htsget will use a predefined c4gh key-pair instead
  # of creating one on-the-fly when handling encrypted data
  predefined: true
  # The name for the secret containing c4gh keys.
  secretName: "c4gh"

# Enable data server TLS
tlsDataServer:
  enabled: false
  secretName: ""

# Enable client TLS for the urlstorage backend (experimental feature)
tlsClient:
  enabled: false
  secretName: ""

htsget:
  # Logging levels and formatting (inherited by rust)
  rustLog: "info" # debug, trace
  formattingStyle: "Pretty" # Full, Compact, Pretty, Json

  # These should match the path in the htsget config below.
  # Path where the sensitive files can be found.
  c4ghPath: "/c4gh"
  tlsPath: "/tls"
  tlsPathDataServer: ""
  tlsPathClient: ""

  # If the data server is enabled, use of a local storage backend can be enabled by setting the localPath to a path where the data files will be mounted
  dataServer:
    enabled: false
    localPath: "/data"
    # Data can be mounted to the local path via an existing persistent volume claim
    existingClaim: "local-data-server-pvc"
    # For a nfs volume there is also the option to set the configuration below instead of using a persistent volume claim
    nfsServer: ""
    nfsPath: ""

# The htsget-rs server is configured by placing the contents of the toml config file below (keep nindent 2).
# All of the available configuration options (https://github.com/umccr/htsget-rs/tree/crypt4gh/htsget-config)
# can be set this way. Paths to sensitive files like TLS certicifaces or c4gh keys need to be set above and match
# those used below. The names of the files that are referenced below should be the same as the ones in the respective
# secrets whose names can be set above.
# Below is an example of a htsget-rs config file utilizing a url_storage.
configMapData: |-
  # Information displayed by the /info endpoint
  name = "htsget.dev"
  version = "development"
  organization_name = "NBIS"
  organization_url = "https://nbis.se/"
  contact_url = "https://nbis.se/"
  documentation_url = "https://github.com/umccr/htsget-rs"

  # The ticket server configuration
  ticket_server_addr = "127.0.0.1:8080"
  ticket_server_cors_allow_origins = "All"
  ticket_server_tls.key = "/tls/tls.key"
  ticket_server_tls.cert = "/tls/tls.crt"

  # disable the internal data server
  data_server_enabled = false

  [[resolvers]]
  regex = "(.*)"
  substitution_string = "$1"

  [resolvers.object_type]
  # if set to true, responseUrl must point to an endpoint serving encrypted data
  send_encrypted_to_client = true
  # if c4gh keys are not set, they will be generated on the fly
  # only custom keys without a passphrase are supported
  private_key = "/c4gh/c4gh.sec.pem"
  public_key = "/c4gh/c4gh.pub.pem"

  [resolvers.storage]
  # The url that will be used for the client's url
  response_url = "http://example.com"
  forward_headers = true
  # if set to true, the client will not check the certificate validity
  danger_accept_invalid_certs = true

  [resolvers.storage.endpoints]
  index = "http://example.com"
  file = "http://example.com"
