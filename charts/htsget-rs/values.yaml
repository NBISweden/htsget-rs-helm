# Default values for htsget-rs chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: harbor.nbis.se/gdi/htsget-rs
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: [] #
nameOverride: ""     #
fullnameOverride: "" #

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  privileged: false

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: "RuntimeDefault"

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: htsget.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  # If the certificates are generated by external providers
  # the secrets containing them need to be created manually.
  #  - secretName: htsget.local-tls
  #    hosts:
  #      - htsget.local
  # issuer requires a configured cert-manager
  issuer: ""
  clusterIssuer: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# If no dependency services uses TLS, e.g. sda-download,
# TLS can be disabled by setting enabled to false.
# Not to be used in production but handy for testing.
tls:
  enabled: false
  issuer: ""
  clusterIssuer: ""
  secretName: ""

c4gh:
    # The secret name that contains the server c4gh keys.
    # Required if htsget will use a predefined c4gh key-pair.
    secretName: ""

# htsget-rs specific configuration.
htsget:
  # Logging levels and formatting (inherited by rust)
  rustLog: "info" # debug, trace
  formattingStyle: "Pretty" # Full, Compact, Pretty, Json

  # If configMapData is set (see below), the following values will be superseded.
  #
  # if set to true, responseUrl must point to /s3-encrypted endpoint
  sendEncryptedToClient: false # set to true if c4gh encryption is used
  # The url that will be used for the client's url
  responseUrl: ""
  forwardHeaders: true

  # Header and file url
  index: ""
  file: ""

  # c4gh keys for server, if ommited c4gh keys will be generated on the fly
  c4gh:
    privateKey: ""
    publicKey: ""
    passPhrase: ""

  tls:
    # Set client authentication for url storage (experimental feature)
    urlStorage:
      key: ""
      cert: ""
      # Set root certificates
      rootStore: ""
      # Set the secret name that contains the client certificates
      secretName: ""
    # Set server authentication
    ticketServer:
      key: ""
      cert: ""

  # Path where the sensitive files can be found.
  c4ghPath: ""
  tlsPath: ""

# Alternatively, the htsget-rs server can be configured by placing the contents of the toml config file below (keep nindent 2).
# This allows for all of the available configuration options (https://github.com/umccr/htsget-rs/tree/crypt4gh/htsget-config)
# to be set but requires any necessary k8s resources such as volumes, secrets, etc. to be created manually.
configMapData: |-
#   ticket_server_addr = "0.0.0.0:8080"
#   ticket_server_cors_allow_origins = "All"
#   [[resolvers]]
#   regex = "(.*)"
#   substitution_string = "$1"
#   [resolvers.storage]
#   response_url = ""
#   forward_headers = true
#   [resolvers.storage.endpoints]
#   index = ""
#   file = ""
